-- This script was generated by the ERD tool in pgAdmin 4.
-- Please log an issue at https://github.com/pgadmin-org/pgadmin4/issues/new/choose if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public.appointment
(
    appointmentid uuid NOT NULL DEFAULT gen_random_uuid(),
    appointmentname character varying(50) COLLATE pg_catalog."default",
    appointmentdate date,
    appointmenttime time without time zone,
    price numeric(10, 2),
    customerid uuid,
    statusid uuid,
    scheduleid uuid,
    serviceid uuid,
    CONSTRAINT appointment_pkey PRIMARY KEY (appointmentid)
);

CREATE TABLE IF NOT EXISTS public.appointment_service
(
    appointmentid uuid NOT NULL,
    serviceid uuid NOT NULL,
    CONSTRAINT appointment_service_pkey PRIMARY KEY (appointmentid, serviceid)
);

CREATE TABLE IF NOT EXISTS public.customer
(
    customerid uuid NOT NULL DEFAULT gen_random_uuid(),
    name character varying(50) COLLATE pg_catalog."default" NOT NULL,
    phonenumber character varying(10) COLLATE pg_catalog."default" NOT NULL,
    address character varying(200) COLLATE pg_catalog."default",
    email character varying(50) COLLATE pg_catalog."default" NOT NULL,
    password character varying(50) COLLATE pg_catalog."default" NOT NULL,
    status integer,
    type integer,
    CONSTRAINT customer_pkey PRIMARY KEY (customerid),
    CONSTRAINT customer_email_key UNIQUE (email)
);

CREATE TABLE IF NOT EXISTS public.invoice
(
    invoiceid uuid NOT NULL DEFAULT gen_random_uuid(),
    paymentid uuid,
    total numeric(10, 2),
    detail character varying(256) COLLATE pg_catalog."default",
    issuedate timestamp without time zone,
    appointmentid uuid,
    CONSTRAINT invoice_pkey PRIMARY KEY (invoiceid)
);

CREATE TABLE IF NOT EXISTS public.payment
(
    paymentid uuid NOT NULL DEFAULT gen_random_uuid(),
    amount numeric(10, 2),
    method boolean,
    status boolean,
    paidat timestamp without time zone,
    CONSTRAINT payment_pkey PRIMARY KEY (paymentid)
);

CREATE TABLE IF NOT EXISTS public.pt
(
    ptid uuid NOT NULL DEFAULT gen_random_uuid(),
    ptname character varying(50) COLLATE pg_catalog."default",
    specialization character varying(100) COLLATE pg_catalog."default",
    ptphone character varying(10) COLLATE pg_catalog."default",
    CONSTRAINT pt_pkey PRIMARY KEY (ptid)
);

CREATE TABLE IF NOT EXISTS public.pt_course
(
    ptid uuid NOT NULL,
    courseid uuid NOT NULL,
    CONSTRAINT pt_course_pkey PRIMARY KEY (ptid, courseid)
);

CREATE TABLE IF NOT EXISTS public.qr_booking
(
    qrid uuid NOT NULL DEFAULT gen_random_uuid(),
    type boolean,
    value character varying(256) COLLATE pg_catalog."default",
    scanned boolean,
    customerid uuid,
    CONSTRAINT qr_booking_pkey PRIMARY KEY (qrid)
);

CREATE TABLE IF NOT EXISTS public.recommendation
(
    rcmid uuid NOT NULL DEFAULT gen_random_uuid(),
    generatedat timestamp without time zone,
    rcmgoals character varying(50) COLLATE pg_catalog."default",
    suggestedcourse character varying(50) COLLATE pg_catalog."default",
    peakhouralert timestamp without time zone,
    customerid uuid,
    courseid uuid,
    CONSTRAINT recommendation_pkey PRIMARY KEY (rcmid)
);

CREATE TABLE IF NOT EXISTS public.schedule
(
    scheduleid uuid NOT NULL DEFAULT gen_random_uuid(),
    dayofweek character varying(10) COLLATE pg_catalog."default",
    maxparticipants integer,
    starttime timestamp without time zone,
    endtime timestamp without time zone,
    CONSTRAINT schedule_pkey PRIMARY KEY (scheduleid)
);

CREATE TABLE IF NOT EXISTS public.service
(
    serviceid uuid NOT NULL DEFAULT gen_random_uuid(),
    servicename character varying(50) COLLATE pg_catalog."default",
    coursedescription character varying(256) COLLATE pg_catalog."default",
    serviceprice numeric(10, 2),
    CONSTRAINT service_pkey PRIMARY KEY (serviceid)
);

CREATE TABLE IF NOT EXISTS public.staff
(
    staffid uuid NOT NULL DEFAULT gen_random_uuid(),
    staffname character varying(50) COLLATE pg_catalog."default",
    "position" character varying(20) COLLATE pg_catalog."default",
    CONSTRAINT staff_pkey PRIMARY KEY (staffid)
);

CREATE TABLE IF NOT EXISTS public.status
(
    statusid uuid NOT NULL DEFAULT gen_random_uuid(),
    statusname character varying(20) COLLATE pg_catalog."default" NOT NULL,
    CONSTRAINT status_pkey PRIMARY KEY (statusid)
);

CREATE TABLE IF NOT EXISTS public.workoutcourse
(
    courseid uuid NOT NULL DEFAULT gen_random_uuid(),
    coursename character varying(50) COLLATE pg_catalog."default",
    imageurl text COLLATE pg_catalog."default",
    personaltrainer uuid,
    durationweek integer,
    description character varying(256) COLLATE pg_catalog."default",
    CONSTRAINT workoutcourse_pkey PRIMARY KEY (courseid)
);

ALTER TABLE IF EXISTS public.appointment
    ADD CONSTRAINT appointment_customerid_fkey FOREIGN KEY (customerid)
    REFERENCES public.customer (customerid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.appointment
    ADD CONSTRAINT appointment_scheduleid_fkey FOREIGN KEY (scheduleid)
    REFERENCES public.schedule (scheduleid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.appointment
    ADD CONSTRAINT appointment_serviceid_fkey FOREIGN KEY (serviceid)
    REFERENCES public.service (serviceid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.appointment
    ADD CONSTRAINT appointment_statusid_fkey FOREIGN KEY (statusid)
    REFERENCES public.status (statusid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.appointment_service
    ADD CONSTRAINT appointment_service_appointmentid_fkey FOREIGN KEY (appointmentid)
    REFERENCES public.appointment (appointmentid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.appointment_service
    ADD CONSTRAINT appointment_service_serviceid_fkey FOREIGN KEY (serviceid)
    REFERENCES public.service (serviceid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.invoice
    ADD CONSTRAINT invoice_appointmentid_fkey FOREIGN KEY (appointmentid)
    REFERENCES public.appointment (appointmentid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.invoice
    ADD CONSTRAINT invoice_paymentid_fkey FOREIGN KEY (paymentid)
    REFERENCES public.payment (paymentid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.pt_course
    ADD CONSTRAINT pt_course_courseid_fkey FOREIGN KEY (courseid)
    REFERENCES public.workoutcourse (courseid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.pt_course
    ADD CONSTRAINT pt_course_ptid_fkey FOREIGN KEY (ptid)
    REFERENCES public.pt (ptid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.qr_booking
    ADD CONSTRAINT qr_booking_customerid_fkey FOREIGN KEY (customerid)
    REFERENCES public.customer (customerid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.recommendation
    ADD CONSTRAINT recommendation_courseid_fkey FOREIGN KEY (courseid)
    REFERENCES public.workoutcourse (courseid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.recommendation
    ADD CONSTRAINT recommendation_customerid_fkey FOREIGN KEY (customerid)
    REFERENCES public.customer (customerid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;


ALTER TABLE IF EXISTS public.workoutcourse
    ADD CONSTRAINT workoutcourse_personaltrainer_fkey FOREIGN KEY (personaltrainer)
    REFERENCES public.pt (ptid) MATCH SIMPLE
    ON UPDATE NO ACTION
    ON DELETE NO ACTION;

END;